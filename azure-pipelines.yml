# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# This is the build name, which shows in Azure DevOps and is stamped into the built assemblies
name: '$(versionBase).$(buildNumber)'

trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  versionBase: '0.1.0'
  buildNumber: $[counter('buildNumberCounter', 1)]

steps:

# Use NuGet version >= 4.9.1 so that the nuget pack command works properly
- task: NuGetToolInstaller@0
  displayName: 'Install NuGet v4.9.2'
  inputs:
    versionSpec: '4.9.2'

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Test (currently empty)'
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Build two packages, the first with a production version number, published to nuget.org when releasing
- task: NuGetCommand@2
  displayName: 'Create release NuGet package'
  inputs:
    command: pack
    packagesToPack: 'src/ReactiveData/ReactiveData.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: 'PACK_VERSION'
    packDestination: '$(Build.ArtifactStagingDirectory)/release'
  env:
    PACK_VERSION: '$(versionBase)'

# Build two packages, the second with a prerelease version number suffix, always published to the CI feed and
# optionally published to nuget.org for public beta releases
- task: NuGetCommand@2
  displayName: 'Create prerelease NuGet package'
  inputs:
    command: pack
    packagesToPack: 'src/ReactiveData/ReactiveData.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: 'PACK_VERSION'
    packDestination: '$(Build.ArtifactStagingDirectory)/prerelease'
  env:
    PACK_VERSION: '$(versionBase)-beta$(buildNumber)'

# Publish to our CI NuGet feed (Azure Artifacts)
- task: NuGetCommand@2
  displayName: 'Publish prerelease NuGet to CI feed'
  inputs:
    command: push
    publishVstsFeed: 'ci-feed'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/prerelease/*.nupkg'
    allowPackageConflicts: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
