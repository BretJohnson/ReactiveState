# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# This is the build name, which shows in Azure DevOps and is stamped into the built assemblies
name: '$(versionBase)-$(Rev:r)'

trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  versionBase: 0.1.0

steps:

# Use NuGet version >= 4.9.1 so that the nuget pack command works properly
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '4.9.2'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Build two packages, the first with a production version number, published to nuget.org when releasing
- task: NuGetCommand@2
  inputs:
    command: pack
    packagesToPack: 'src/ReactiveData/ReactiveData.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: 'PACK_VERSION'
  env:
    PACK_VERSION: '$(versionBase)'

# Build two packages, the second with a beta prefixed prerelease version number, always published to the CI feed and optionally published to nuget.org
- task: NuGetCommand@2
  inputs:
    command: pack
    packagesToPack: 'src/ReactiveData/ReactiveData.csproj'
    versionEnvVar: 'PACK_VERSION'
  env:
    PACK_VERSION: '$(versionBase)-beta$(Rev:r)'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
